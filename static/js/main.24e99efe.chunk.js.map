{"version":3,"sources":["components/Search.js","components/UserCard.js","components/RepoCard.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","handleUserNameChange","e","value","target","setState","username","state","history","this","className","onChange","type","name","placeholder","onClick","push","React","Component","withRouter","UserCard","user","src","avatar_url","alt","company","bio","RepoCard","repo","href","html_url","full_name","stargazers_count","watchers_count","App","repos","userDataError","loading","pageSize","page","fetchingRepos","handleScroll","currentScroll","window","scrollY","maxScroll","scrollMaxY","public_repos","loadPage","fetchUserData","a","fetch","res","ok","json","data","error","message","fetchRepos","fetchData","reposError","Promise","all","undefined","login","addEventListener","match","params","removeEventListener","hanleScroll","renderRepos","length","Fragment","map","key","id","Boolean","location","hostname","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.24e99efe.chunk.js","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router-dom';\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: props.username || '',\n        };\n    }\n\n    handleUserNameChange = e => {\n        const value = e.target.value;\n\n        this.setState({\n            username: value,\n        });\n    };\n\n    render() {\n        const {history} = this.props;\n        const {username} = this.state;\n\n        return (\n            <div className=\"bg-dark\">\n                <div className=\"container py-5\">\n                    <div className=\"row\">\n                        <div className=\"col-8 offset-2 text-center\">\n                            <div className=\"row\">\n                                <div className=\"col-9\">\n                                    <input\n                                        className=\"form-control\"\n                                        value={username}\n                                        onChange={this.handleUserNameChange}\n                                        type=\"text\"\n                                        name=\"username\"\n                                        placeholder=\"Enter username\"\n                                    />\n                                </div>\n                                <div className=\"col-3\">\n                                    <button\n                                        onClick={() => history.push(`/${username}`)}\n                                        className=\"btn btn-large btn-success\">\n                                        Search\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Search);","import React from \"react\";\n\nclass UserCard extends React.Component {\n    render() {\n        const user = this.props.user\n        return (\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <img src={user.avatar_url} alt=\"User Avatar\"/>\n                    <h1>{user.name}</h1>\n                    <p>{user.company}</p>\n                    <p>{user.bio}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UserCard","import React from 'react';\n\nconst RepoCard = ({repo}) => (\n    <div className=\"card mb-4\">\n        <div className=\"card-body\">\n            <a href={repo.html_url} target=\"_blank\">\n                <h3>{repo.full_name}</h3>\n\n                <p>\n                    <strong>Stars:</strong> {repo.stargazers_count}\n                </p>\n                <p className=\"mb-0\">\n                    <strong>Watchers:</strong> {repo.watchers_count}\n                </p>\n            </a>\n        </div>\n    </div>\n);\n\nexport default RepoCard;","import React from 'react';\nimport Search from './components/Search';\nimport UserCard from './components/UserCard';\nimport RepoCard from './components/RepoCard';\nimport {withRouter} from 'react-router-dom';\n\nconst PAGE_SIZE = 10;\n\nclass App extends React.Component {\n    state = {\n        user: null,\n        repos: [],\n        userDataError: null,\n        loading: false,\n        pageSize: 10,\n        page: 1,\n        fetchingRepos: false,\n    };\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n        const {match} = this.props;\n\n        if (match.params.username) this.fetchData(match.params.username);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.hanleScroll);\n    }\n\n    handleScroll = () => {\n        const currentScroll = window.scrollY;\n        const maxScroll = window.scrollMaxY;\n        const {page, pageSize, user} = this.state;\n\n        if (\n            user &&\n            maxScroll - currentScroll <= 100 &&\n            (page - 1) * pageSize < user.public_repos\n        )\n            this.loadPage();\n    };\n\n    fetchUserData = async username => {\n        const res = await fetch(`https://api.github.com/users/${username}`);\n        if (res.ok) {\n            const data = await res.json();\n\n            return {data};\n        }\n\n        const error = (await res.json()).message;\n\n        return {error};\n    };\n\n    fetchRepos = async username => {\n        const {pageSize, page} = this.state;\n        const res = await fetch(\n            `https://api.github.com/users/${username}/repos?page=${page}&per_page=${pageSize}`,\n        );\n        if (res.ok) {\n            const data = await res.json();\n\n            return {data};\n        }\n\n        const error = (await res.json()).message;\n\n        return {error};\n    };\n\n    fetchData = async username => {\n        this.setState(\n            {loading: true, userDataError: null, reposError: null},\n            async () => {\n                try {\n                    const [user, repos] = await Promise.all([\n                        this.fetchUserData(username),\n                        this.fetchRepos(username),\n                    ]);\n\n                    if (user.data !== undefined && repos.data !== undefined) {\n                        return this.setState({\n                            user: user.data,\n                            repos: repos.data,\n                            page: 2,\n                            loading: false,\n                        });\n                    }\n\n                    this.setState({\n                        userDataError: user.error,\n                        reposError: repos.error,\n                        loading: false,\n                    });\n                } catch (err) {\n                    this.setState({\n                        error: 'There was some error',\n                        loading: false,\n                    });\n                }\n            },\n        );\n    };\n\n    loadPage = async () => {\n        if (this.state.fetchingRepos === true) return;\n\n        this.setState({fetchingRepos: true}, async () => {\n            const {data} = await this.fetchRepos(this.state.user.login);\n\n            if (data)\n                this.setState(state => ({\n                    repos: [...state.repos, ...data],\n                    page: state.page + 1,\n                    fetchingRepos: false,\n                }));\n        });\n    };\n\n    render() {\n        const {userDataError, reposError, loading, user, repos} = this.state;\n        const {match} = this.props;\n\n        const renderRepos = !loading && !reposError && !!repos.length;\n\n        return (\n            <>\n                <Search username={match.params.username}/>\n                <div className=\"container\">\n                    <div className=\"text-center pt-5\">\n                        {loading && <p>Loading...</p>}\n                        {userDataError && <p className=\"text-danger\">{userDataError}</p>}\n                    </div>\n                    {!loading && !userDataError && user && <UserCard user={user}/>}\n                    {reposError && <p className=\"text-danger\">{reposError}</p>}\n\n                    {renderRepos && (\n                        <React.Fragment>\n                            {repos.map(repo => (\n                                <RepoCard key={repo.id} repo={repo}/>\n                            ))}\n                        </React.Fragment>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <Route\n            path=\"/:username?\"\n            exact\n            render={({match}) => <App key={match.params.username}/>}\n        />\n    </Router>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}